{"version":3,"sources":["components/Paper/index.jsx","components/Chart/BarChart.jsx","components/Chart/LineChart.jsx","components/Chart/AreaChart.jsx","components/Chart/index.jsx","components/Chart/constants.js","utils/index.js","components/ConfirmedCases/index.jsx","components/InfectionDifference/index.jsx","components/InfectionFactor/index.jsx","components/StickyNote/index.jsx","components/Subtitle/index.jsx","components/Title/index.jsx","hooks/useDetailDate.js","resources/data/index.js","hooks/useFetchCovidResults.js","hooks/useGrowthEstimates.js","views/Home/components/Section/ActualState/Header.jsx","views/Home/components/Section/ActualState/HeaderPaper.jsx","views/Home/components/Chart/SinaveChart.jsx","views/Home/components/Section/ActualState/SummaryCases.jsx","views/Home/components/Chart/ConfirmedEvolutionChart.jsx","views/Home/components/Chart/DiscardedConfirmedChart.jsx","views/Home/components/Section/ActualState/index.jsx","views/Home/components/Chart/GrowthScenarioChart.jsx","views/Home/components/Section/GrowthEstimates/index.jsx","views/Home/graphql.js","views/Home/index.jsx"],"names":["Paper","className","type","elevation","children","classnames","defaultProps","memo","CovidBarChart","layout","dataKey","height","strokeDasharray","xaxis","yaxis","colors","data","withLabels","useState","bars","setBars","useEffect","isEmpty","obj","omit","Object","keys","width","map","key","idx","color","length","fill","position","CovidLineChart","lines","stroke","areas","setAreas","Chart","props","getNote","note","Typography","variant","title","noteLocationBottom","style","marginTop","marginBottom","Comp","undefined","BarChart","LineChart","AreaChart","React","createElement","pick","getChart","primarySource","explanatoryNote","hide","todaysDate","Date","numberWithCommas","x","toString","replace","setTimeToDate","date1","date2","today","set","hours","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","formatToShortDate","date","getDay","getMonth","formatDate","getYear","ConfirmedCases","total","propsTypes","PropTypes","number","isRequired","InfectionDifference","value","increased","Grid","item","xs","decreased","icon","faSortUp","faSortDown","size","InfectionFactor","yesterday","difference","day","month","oldDate","setOldDate","d","subDays","format","container","alignItems","Math","abs","toFixed","object","StickyNote","description","justify","Subtitle","text","Title","useDetailDate","results","start","end","setDate","startDate","endDate","extra","discarded","useFetchCovidResults","query","countries","newDate","originalDate","parseISO","dateArray","split","parseInt","getDate","currentData","oldData","oldInfectionFactor","averageInfectionFactor","currentDate","useQuery","variables","gt","loading","average","counter","result","index","newObj","find","extraData","confirmed","assign","isToday","findIndex","console","log","infectionFactor","year","getFullYear","locale","es","monthNumber","weekday","time","getChartData","newDates","lastConfirmedValue","i","addDays","push","round","concat","name","confirmados","useGrowthEstimates","estimateDate","formattedDate","items","setItems","shortStartDate","shortEstimateDate","longEstimateDate","fullEstimateDate","currentFormattedDate","chartData1","chartData2","chartData3","stickyNotes","chartData","getScenariosItems","subtitle","md","lg","SinaveChart","descartados","SummaryCases","newCases","recovered","deceased","lethality","rates","setRates","direction","sm","ConfirmedEvolutionChart","defunciones","deaths","recuperados","ActualStateSection","Header","HeaderPaper","yesterdayTotal","current","DiscardedConfirmedChart","GrowthScenarioChart","GrowthEstimatesSection","COVID_RESULTS","gql","params","match","CircularLoader","ActualState","GrowthEstimates"],"mappings":"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","file":"static/js/4.2b1d75d4.chunk.js","sourcesContent":["import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { Paper as MaterialPaper } from \"@material-ui/core\";\n\nconst Paper = ({ className, type, elevation, children }) => {\n  return (\n    <MaterialPaper\n      className={classnames(className, \"covid19-paper\", `paper-${type}`)}\n      elevation={elevation}\n    >\n      {children}\n    </MaterialPaper>\n  );\n};\n\nPaper.defaultProps = {\n  className: null,\n  type: \"info\",\n  elevation: 2,\n};\n\nPaper.propTypes = {\n  className: PropTypes.string,\n  type: PropTypes.oneOf([\"info\", \"success\", \"warning\", \"danger\", \"dark\", \"note\"]),\n  elevation: PropTypes.number,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.arrayOf(PropTypes.element),\n  ]),\n};\n\nexport default memo(Paper);\n","import React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport isEmpty from \"lodash/isEmpty\";\nimport omit from \"lodash/omit\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport {\n  BarChart,\n  Bar,\n  CartesianGrid,\n  LabelList,\n  Legend,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { VERTICAL, HORIZONTAL } from \"./constants\";\n\nconst CovidBarChart = ({\n  layout,\n  dataKey,\n  height,\n  strokeDasharray,\n  xaxis,\n  yaxis,\n  colors,\n  data,\n  withLabels,\n}) => {\n  const [bars, setBars] = useState([]);\n\n  useEffect(() => {\n    if (!isEmpty(data)) {\n      const obj = omit(data[0], dataKey);\n\n      setBars(Object.keys(obj));\n    }\n  }, [dataKey, data]);\n\n  return (\n    <AutoSizer>\n      {({ width }) => (\n        <BarChart\n          className=\"covid19-bar-chart\"\n          layout={layout}\n          data={data}\n          width={width}\n          height={height}\n        >\n          <CartesianGrid strokeDasharray={strokeDasharray} />\n          <XAxis {...xaxis} />\n          <YAxis {...yaxis} />\n          <Tooltip />\n          <Legend />\n          {bars.map((key, idx) => {\n            let color = colors[0];\n\n            if (colors.length > 1) color = colors[idx];\n\n            return (\n              <Bar key={key} dataKey={key} fill={color}>\n                {withLabels && <LabelList dataKey={key} position=\"top\" />}\n              </Bar>\n            );\n          })}\n        </BarChart>\n      )}\n    </AutoSizer>\n  );\n};\n\nCovidBarChart.defaultProps = {};\n\nCovidBarChart.propTypes = {\n  layout: PropTypes.oneOf([VERTICAL, HORIZONTAL]),\n  dataKey: PropTypes.string,\n  height: PropTypes.number,\n  strokeDasharray: PropTypes.string,\n  xaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  yaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  colors: PropTypes.arrayOf(PropTypes.string),\n  data: PropTypes.arrayOf(PropTypes.object),\n  withLabels: PropTypes.bool,\n};\n\nexport default memo(CovidBarChart);\n","import React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport isEmpty from \"lodash/isEmpty\";\nimport omit from \"lodash/omit\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport {\n  CartesianGrid,\n  LabelList,\n  Legend,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { VERTICAL, HORIZONTAL } from \"./constants\";\n\nconst CovidLineChart = ({\n  layout,\n  dataKey,\n  height,\n  strokeDasharray,\n  xaxis,\n  yaxis,\n  colors,\n  data,\n  withLabels,\n}) => {\n  const [lines, setBars] = useState([]);\n\n  useEffect(() => {\n    if (!isEmpty(data)) {\n      const obj = omit(data[0], dataKey);\n\n      setBars(Object.keys(obj));\n    }\n  }, [dataKey, data]);\n\n  return (\n    <AutoSizer>\n      {({ width }) => (\n        <LineChart\n          layout={layout}\n          data={data}\n          width={width}\n          height={height}\n        >\n          <CartesianGrid strokeDasharray={strokeDasharray} />\n          <XAxis {...xaxis} />\n          <YAxis {...yaxis} />\n          <Tooltip />\n          <Legend />\n          {lines.map((key, idx) => {\n            let color = colors[0];\n\n            if (colors.length > 1) color = colors[idx];\n\n            return (\n              <Line key={key} type=\"monotone\" dataKey={key} stroke={color}>\n                {withLabels && <LabelList dataKey={key} position=\"top\" />}\n              </Line>\n            );\n          })}\n        </LineChart>\n      )}\n    </AutoSizer>\n  );\n};\n\nCovidLineChart.defaultProps = {};\n\nCovidLineChart.propTypes = {\n  layout: PropTypes.oneOf([VERTICAL, HORIZONTAL]),\n  dataKey: PropTypes.string,\n  height: PropTypes.number,\n  strokeDasharray: PropTypes.string,\n  xaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  yaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  colors: PropTypes.arrayOf(PropTypes.string),\n  data: PropTypes.arrayOf(PropTypes.object),\n  withLabels: PropTypes.bool,\n};\n\nexport default memo(CovidLineChart);\n","import React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport isEmpty from \"lodash/isEmpty\";\nimport omit from \"lodash/omit\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport {\n  AreaChart,\n  Area,\n  CartesianGrid,\n  LabelList,\n  Legend,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { VERTICAL, HORIZONTAL } from \"./constants\";\n\nconst CovidBarChart = ({\n  layout,\n  dataKey,\n  height,\n  strokeDasharray,\n  xaxis,\n  yaxis,\n  colors,\n  data,\n  withLabels,\n}) => {\n  const [areas, setAreas] = useState([]);\n\n  useEffect(() => {\n    if (!isEmpty(data)) {\n      const obj = omit(data[0], dataKey);\n\n      setAreas(Object.keys(obj));\n    }\n  }, [dataKey, data]);\n\n  return (\n    <AutoSizer>\n      {({ width }) => (\n        <AreaChart\n          className=\"covid19-area-chart\"\n          layout={layout}\n          data={data}\n          width={width}\n          height={height}\n        >\n          <CartesianGrid strokeDasharray={strokeDasharray} />\n          <XAxis {...xaxis} />\n          <YAxis {...yaxis} />\n          <Tooltip />\n          <Legend />\n          {areas.map((key, idx) => {\n            let color = colors[0];\n\n            if (colors.length > 1) color = colors[idx];\n\n            return (\n              <Area\n                key={key}\n                type=\"monotone\"\n                dataKey={key}\n                stroke={color}\n                fill={color}\n              >\n                <LabelList dataKey={key} position=\"top\" />\n              </Area>\n            );\n          })}\n        </AreaChart>\n      )}\n    </AutoSizer>\n  );\n};\n\nCovidBarChart.defaultProps = {};\n\nCovidBarChart.propTypes = {\n  layout: PropTypes.oneOf([VERTICAL, HORIZONTAL]),\n  dataKey: PropTypes.string,\n  height: PropTypes.number,\n  strokeDasharray: PropTypes.string,\n  xaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  yaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  colors: PropTypes.arrayOf(PropTypes.string),\n  data: PropTypes.arrayOf(PropTypes.object),\n  withLabels: PropTypes.bool,\n};\n\nexport default memo(CovidBarChart);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport pick from \"lodash/pick\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Typography } from \"@material-ui/core\";\nimport Paper from \"../Paper\";\nimport BarChart from \"./BarChart\";\nimport LineChart from \"./LineChart\";\nimport AreaChart from \"./AreaChart\";\nimport { BAR, LINE, AREA, VERTICAL, HORIZONTAL } from \"./constants\";\n\nconst Chart = (props) => {\n  const getNote = () => {\n    if (isEmpty(props.note)) return \"\";\n\n    return (\n      <Typography className=\"chart-note\" variant=\"subtitle1\">\n        <b>Nota:</b> {props.note}\n      </Typography>\n    );\n  };\n\n  const getChart = () => {\n    let Comp = undefined;\n\n    if (props.type === BAR) Comp = BarChart;\n    else if (props.type === LINE) Comp = LineChart;\n    else if (props.type === AREA) Comp = AreaChart;\n\n    return React.createElement(Comp, {\n      ...pick(props, [\n        \"layout\",\n        \"dataKey\",\n        \"height\",\n        \"strokeDasharray\",\n        \"xaxis\",\n        \"yaxis\",\n        \"colors\",\n        \"data\",\n        \"withLabels\",\n      ]),\n    });\n  };\n\n  return (\n    <div className={classnames(\"covid19-chart\", props.className, props.type)}>\n      <Paper className=\"chart-paper\">\n        <>\n          <Typography className=\"chart-title\" variant=\"h6\">\n            {props.title}\n          </Typography>\n          {!props.noteLocationBottom && getNote()}\n          <div\n            style={{\n              marginTop: \"10px\",\n              marginBottom: \"10px\",\n              width: \"100%\",\n              height: props.height,\n            }}\n          >\n            {getChart()}\n          </div>\n          {props.noteLocationBottom && getNote()}\n          {!isEmpty(props.primarySource) && (\n            <div>\n              <Typography className=\"chart-bottom-title\" variant=\"subtitle1\">\n                Fuente primaria\n              </Typography>\n              <Typography\n                className=\"chart-bottom-description\"\n                variant=\"subtitle1\"\n              >\n                {props.primarySource}\n              </Typography>\n            </div>\n          )}\n          {!isEmpty(props.explanatoryNote) && (\n            <div>\n              <Typography\n                className=\"chart-bottom-explanatory-note-title\"\n                variant=\"subtitle1\"\n              >\n                Nota aclaratoria\n              </Typography>\n              <Typography\n                className=\"chart-bottom-description\"\n                variant=\"subtitle1\"\n              >\n                {props.explanatoryNote}\n              </Typography>\n            </div>\n          )}\n        </>\n      </Paper>\n    </div>\n  );\n};\n\nChart.defaultProps = {\n  className: null,\n  type: BAR,\n  layout: HORIZONTAL,\n  dataKey: \"name\",\n  height: 150,\n  strokeDasharray: \"3 3\",\n  note: \"\",\n  explanatoryNote: \"\",\n  noteLocationBottom: true,\n  xaxis: {\n    dataKey: \"name\",\n    type: \"category\",\n    hide: false,\n  },\n  yaxis: {\n    dataKey: \"\",\n    type: \"number\",\n    hide: false,\n  },\n  colors: [\"#4a90e2\"],\n  data: [],\n  withLabels: true,\n};\n\nChart.propTypes = {\n  className: PropTypes.string,\n  type: PropTypes.oneOf([BAR, LINE, AREA]),\n  layout: PropTypes.oneOf([VERTICAL, HORIZONTAL]),\n  dataKey: PropTypes.string.isRequired,\n  height: PropTypes.number,\n  strokeDasharray: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  note: PropTypes.string,\n  primarySource: PropTypes.string,\n  explanatoryNote: PropTypes.string,\n  xaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  yaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  colors: PropTypes.arrayOf(PropTypes.string),\n  data: PropTypes.arrayOf(PropTypes.object),\n  withLabels: PropTypes.bool,\n  noteLocationBottom: PropTypes.bool,\n};\n\nexport default memo(Chart);\n","export const BAR = 'bar';\nexport const LINE = 'line';\nexport const AREA = 'area';\nexport const VERTICAL = \"vertical\";\nexport const HORIZONTAL = \"horizontal\";\n","import {\n  set,\n  getDate as getDay,\n  getMonth,\n  getYear,\n  parseISO,\n  subDays,\n} from \"date-fns\";\nimport isEmpty from \"lodash/isEmpty\";\n\nconst todaysDate = new Date();\n\nexport function numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nexport function setTimeToDate(date1, date2) {\n  const today = date2 ? date2 : todaysDate;\n  return set(new Date(date1), {\n    hours: today.getHours(),\n    minutes: today.getMinutes(),\n    seconds: today.getSeconds(),\n    milliseconds: today.getMilliseconds(),\n  });\n}\n\nexport function getDate(date) {\n  let newDate;\n  let originalDate;\n\n  if (!parseISO(date)) {\n    const dateArray = !isEmpty(date) ? date.split(\"-\") : [];\n    newDate = !isEmpty(dateArray)\n      ? new Date(dateArray[2], parseInt(dateArray[1]) - 1, dateArray[0])\n      : new Date();\n    originalDate = newDate;\n  } else {\n    newDate = setTimeToDate(date);\n    originalDate = newDate;\n  }\n\n  return {\n    oldDate: subDays(newDate, 20),\n    newDate: newDate,\n    originalDate: originalDate,\n  };\n}\n\nexport function formatToShortDate(date) {\n  return `${getDay(date)}/${getMonth(date) + 1}`;\n}\n\nexport function formatDate(date) {\n  return `${getDay(date)}/${getMonth(date) + 1}/${getYear(date)}`;\n}\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Typography } from \"@material-ui/core\";\nimport Paper from \"../Paper\";\nimport { numberWithCommas } from \"../../utils\";\n\nconst ConfirmedCases = ({ total }) => {\n  return (\n    <Paper className=\"confirmed-cases-paper\" type=\"warning\">\n      <Typography className=\"confirmed-cases-title\" variant=\"h6\">\n        casos confirmados\n      </Typography>\n      <Typography className=\"confirmed-cases-total\" variant=\"h1\">\n        {numberWithCommas(total)}\n      </Typography>\n      <Typography className=\"confirmed-cases-description\" variant=\"h6\">\n        incluyendo fallecidos y recuperados\n      </Typography>\n    </Paper>\n  );\n};\n\nConfirmedCases.defaultProps = {\n  total: 0,\n};\n\nConfirmedCases.propsTypes = {\n  total: PropTypes.number.isRequired,\n};\n\nexport default memo(ConfirmedCases);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSortDown, faSortUp } from \"@fortawesome/free-solid-svg-icons\";\n\nconst InfectionDifference = ({ value, increased }) => {\n  return (\n    <Grid className=\"covid19-infection-difference\" item xs={12}>\n      <FontAwesomeIcon\n        className={classnames({ increased: increased, decreased: !increased })}\n        icon={increased ? faSortUp : faSortDown}\n        size=\"3x\"\n        color=\"#d0021b\"\n      />\n      <Typography className=\"covid19-infection-difference-value\" variant=\"h5\">\n        {value}\n      </Typography>\n    </Grid>\n  );\n};\n\nInfectionDifference.defaultProps = {\n  value: 0,\n  increased: true,\n};\n\nInfectionDifference.propTypes = {\n  value: PropTypes.string,\n  increased: PropTypes.bool,\n};\n\nexport default memo(InfectionDifference);\n","import \"./style.scss\";\nimport React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { format, subDays } from \"date-fns\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Paper from \"../Paper\";\nimport InfectionDifference from \"../InfectionDifference\";\n\nconst InfectionFactor = ({\n  date,\n  today,\n  yesterday,\n  difference,\n}) => {\n  const [oldDate, setOldDate] = useState({\n    day: 0,\n    month: 0,\n  });\n\n  useEffect(() => {\n    if (date) {\n      const d = subDays(date, 1);\n      setOldDate({\n        day: format(d, 'd'),\n        month: format(d, 'L'),\n      })\n    };\n  }, [date]);\n\n  return (\n    <Paper className=\"infection-factor-paper\">\n      <Typography className=\"infection-factor-title\" variant=\"h6\">\n        factor de infecci&oacute;n\n      </Typography>\n      <Grid container alignItems=\"center\">\n        <Grid item xs={6}>\n          <Typography className=\"infection-factor-today-value\" variant=\"h2\">\n            {today}\n          </Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <InfectionDifference\n            value={Math.abs(difference).toFixed(2)}\n            increased={difference > 0}\n          />\n        </Grid>\n        <Typography className=\"infection-factor-label\" variant=\"subtitle1\">\n          por persona\n        </Typography>\n      </Grid>\n      <Typography className=\"infection-factor-yesterday-title\" variant=\"h5\">\n        Factor del {oldDate.day}/{oldDate.month}\n      </Typography>\n      <Typography className=\"infection-factor-yesterday-value\" variant=\"h5\">\n        {yesterday}\n      </Typography>\n    </Paper>\n  );\n};\n\nInfectionFactor.defaultProps = {\n  date: null,\n  today: 0,\n  yesterday: 0,\n  difference: 0,\n};\n\nInfectionFactor.propsTypes = {\n  date: PropTypes.object,\n  today: PropTypes.number,\n  yesterday: PropTypes.number,\n  difference: PropTypes.number,\n};\n\nexport default memo(InfectionFactor);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport isEmpty from \"lodash/isEmpty\";\nimport classnames from \"classnames\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Paper from \"../Paper\";\nimport { numberWithCommas } from \"../../utils\";\n\nconst NOTE = \"note\";\n\nconst StickyNote = ({ className, type, value, title, description }) => {\n  return (\n    <Paper\n      className={classnames(className, \"covid19-sticky-notes\")}\n      type={type}\n    >\n      {type !== NOTE && (\n        <Grid container alignItems=\"center\" justify=\"space-between\">\n          <Grid item xs={5}>\n            <Typography className=\"covid19-sticky-notes-value\" variant=\"h2\">\n              {numberWithCommas(value)}\n            </Typography>\n          </Grid>\n          <Grid item xs={7}>\n            <Typography className=\"covid19-sticky-notes-title\" variant=\"h6\">\n              {title}\n            </Typography>\n            {!isEmpty(description) && (\n              <Typography className=\"covid19-sticky-notes-description\">\n                {description}\n              </Typography>\n            )}\n          </Grid>\n        </Grid>\n      )}\n      {type === NOTE && (\n        <Grid container alignItems=\"center\">\n          <Typography variant=\"h6\">NOTA</Typography>\n          <Typography variant=\"h6\">\n            {title}\n          </Typography>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nStickyNote.defaultProps = {\n  className: null,\n  type: \"info\",\n  value: 0,\n};\n\nStickyNote.propTypes = {\n  className: PropTypes.string,\n  type: PropTypes.oneOf([\"info\", \"success\", \"warning\", \"danger\", \"dark\", \"note\"]),\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n};\n\nexport default memo(StickyNote);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { Typography } from \"@material-ui/core\";\n\nconst Subtitle = ({ className, text }) => {\n  return (\n    <Typography className={classnames(className, \"covid19-subtitle\")} variant=\"h5\">\n      {text}\n    </Typography>\n  );\n};\n\nSubtitle.defaultProps = {\n  className: null,\n};\n\nSubtitle.propTypes = {\n  className: PropTypes.string,\n  text: PropTypes.string.isRequired,\n};\n\nexport default memo(Subtitle);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { Typography } from \"@material-ui/core\";\n\nconst Title = ({ className, text }) => {\n  return (\n    <Typography className={classnames(className, \"covid19-title\")} variant=\"h2\">\n      {text}\n    </Typography>\n  );\n};\n\nTitle.defaultProps = {\n  className: null,\n};\n\nTitle.propTypes = {\n  className: PropTypes.string,\n  text: PropTypes.string.isRequired,\n};\n\nexport default memo(Title);\n","import { useEffect, useState } from \"react\";\nimport isEmpty from \"lodash/isEmpty\";\n\nexport function useDetailDate(results) {\n  const [d, setDate] = useState({\n    start: null,\n    end: null,\n  });\n\n  useEffect(() => {\n    if (!isEmpty(results)) {\n      const startDate = new Date(results[0].date);\n      const endDate = new Date(results[results.length - 1].date);\n\n      setDate({\n        start: startDate,\n        end: endDate,\n      });\n    }\n  }, [results]);\n\n  return d;\n}\n","/* This file will have extra data that does not come in the GraphQL covid19 API.\n   This data will be included in a future self-made API with a more data detail.\n*/\n\nconst extra = [\n  {\n    date: \"2020-3-22\",\n    discarded: 100,\n  },\n  {\n    date: \"2020-3-23\",\n    discarded: 300,\n  },\n  {\n    date: \"2020-3-24\",\n    discarded: 500,\n  },\n  {\n    date: \"2020-3-25\",\n    discarded: 700,\n  },\n  {\n    date: \"2020-3-26\",\n    discarded: 900,\n  },\n  {\n    date: \"2020-3-27\",\n    discarded: 1100,\n  },\n  {\n    date: \"2020-3-28\",\n    discarded: 1300,\n  },\n  {\n    date: \"2020-3-29\",\n    discarded: 1600,\n  },\n  {\n    date: \"2020-3-30\",\n    discarded: 1900,\n  },\n  {\n    date: \"2020-3-31\",\n    discarded: 2200,\n  },\n  {\n    date: \"2020-4-1\",\n    discarded: 2500\n  },\n  {\n    date: \"2020-4-2\",\n    discarded: 2800,\n  },\n  {\n    date: \"2020-4-3\",\n    discarded: 3100,\n  },\n  {\n    date: \"2020-4-4\",\n    discarded: 3400,\n  },\n  {\n    date: \"2020-4-5\",\n    discarded: 3700,\n  },\n  {\n    date: \"2020-4-6\",\n    discarded: 4000,\n  },\n  {\n    date: \"2020-4-7\",\n    discarded: 4300,\n  },\n  {\n    date: \"2020-4-8\",\n    discarded: 4600,\n  },\n  {\n    date: \"2020-4-9\",\n    discarded: 4900,\n  },\n  {\n    date: \"2020-4-10\",\n    discarded: 5200,\n  },\n  {\n    date: \"2020-4-11\",\n    discarded: 5500,\n  },\n  {\n    date: \"2020-4-12\",\n    discarded: 5800,\n  },\n  {\n    date: \"2020-4-13\",\n    discarded: 6100,\n  }\n];\n\nexport default extra;\n","import { useQuery } from \"@apollo/react-hooks\";\nimport isEmpty from \"lodash/isEmpty\";\nimport find from \"lodash/find\";\nimport { format, isToday } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\nimport extraData from \"../resources/data\";\nimport { getDate, setTimeToDate } from \"../utils\";\n\nexport function useFetchCovidResults(query, countries, date) {\n  const { oldDate, newDate, originalDate } = getDate(date);\n  let results = [];\n  let currentData = undefined;\n  let oldData = undefined;\n  let oldInfectionFactor = 0;\n  let averageInfectionFactor = 0;\n  let currentDate = newDate;\n\n  const { data, loading } = useQuery(query, {\n    variables: {\n      countries: countries,\n      date: { gt: oldDate },\n    },\n  });\n\n  if (data && !loading) {\n    let average = 0;\n    let counter = 0;\n\n    results = data.results.map((result, index) => {\n      let newObj = result;\n      const item = find(extraData, { date: result.date });\n\n      if (index !== data.results.length - 1) {\n        counter++;\n\n        average +=\n          data.results[index + 1].confirmed !== 0 || result.confirmed !== 0\n            ? data.results[index + 1].confirmed / result.confirmed\n            : 0;\n      }\n\n      if (item) Object.assign(newObj, item);\n\n      return newObj;\n    });\n\n    averageInfectionFactor = (average / counter).toFixed(2);\n  }\n\n  if (isToday(originalDate) && data && !loading) {\n    currentData = results[results.length - 1];\n    oldData = results[results.length - 2];\n    currentDate = setTimeToDate(new Date(currentData.date));\n    oldInfectionFactor = (\n      oldData.confirmed / results[results.length - 3].confirmed\n    ).toFixed(2);\n  } else if (!isToday(originalDate) && data && !loading) {\n    const d = `${format(newDate, \"yyyy\")}-${format(newDate, \"M\")}-${format(\n      newDate,\n      \"d\"\n    )}`;\n    const idx = results.findIndex((result) => result.date === d);\n    console.log(d, idx);\n    currentData = results[idx];\n    oldData = results[idx - 1];\n    currentDate = setTimeToDate(new Date(currentData.date));\n    oldInfectionFactor = (\n      oldData.confirmed / results[idx - 2].confirmed\n    ).toFixed(2);\n  }\n\n  return {\n    loading: loading,\n    results: results,\n    currentData: currentData,\n    oldData: oldData,\n    infectionFactor: !isEmpty(currentData)\n      ? (currentData.confirmed / oldData.confirmed).toFixed(2)\n      : 0,\n    oldInfectionFactor: oldInfectionFactor,\n    averageInfectionFactor: averageInfectionFactor,\n    currentDate: currentDate,\n    year: currentDate.getFullYear(),\n    month: format(currentDate, \"LLLL\", { locale: es }),\n    monthNumber: currentDate.getMonth() + 1,\n    weekday: format(currentDate, \"cccc\", { locale: es }),\n    day: currentDate.getDate(),\n    time: format(currentDate, \"p\"),\n    isToday: isToday(currentDate),\n  };\n}\n","import { useEffect, useState } from \"react\";\nimport { addDays, format, getDate, getMonth, getYear } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\nimport { formatDate, formatToShortDate } from \"../utils\";\nimport { useDetailDate } from \"./useDetailDate\";\n\nfunction getChartData(infectionFactor, results) {\n  const date = new Date(results[results.length - 1].date);\n  const newDates = [];\n  const length = results.length;\n  let lastConfirmedValue = results[length - 1].confirmed;\n\n  for (let i = 1; i <= 5; i++) {\n    lastConfirmedValue = lastConfirmedValue * infectionFactor;\n    const newDate = addDays(date, i);\n    newDates.push({\n      date: `${getYear(newDate)}-${format(newDate, \"M\")}-${format(\n        newDate,\n        \"d\"\n      )}`,\n      confirmed: Math.round(lastConfirmedValue),\n    });\n  }\n\n  const newResults = results.concat(newDates);\n  const items = newResults.map((result, index) => {\n    // const key = index < newResults.length - 5 ? \"confirmados\" : \"descartados\";\n\n    return {\n      // key: key,\n      name: `${formatToShortDate(new Date(result.date))}`,\n      confirmados: result.confirmed,\n    };\n  });\n\n  return items;\n}\n\nfunction getScenariosItems(date, data) {\n  const omsInfectionFactor = \"2.00\";\n  const chartData1 = getChartData(data.averageInfectionFactor, data.results);\n  const chartData2 = getChartData(data.infectionFactor, data.results);\n  const chartData3 = getChartData(omsInfectionFactor, data.results);\n\n  return [\n    {\n      title: `usando el factor promedio de infección del ${date.shortStartDate} al ${date.currentFormattedDate}`,\n      stickyNotes: [\n        {\n          title: \"factor promedio de infección\",\n          value: data.averageInfectionFactor,\n          type: \"warning\",\n        },\n        {\n          title: `estimación cantidad de posibles casos para el ${date.fullEstimateDate}`,\n          value: chartData1[chartData1.length - 1].confirmados,\n        },\n        {\n          title: `Esta condición solo se da si este factor de infección se mantiene hasta el ${date.shortEstimateDate}; esto puede aumentar o disminuir.`,\n          type: \"note\",\n        },\n      ],\n      chartData: chartData1,\n    },\n    {\n      title: `usando el factor de infección más reciente al ${date.currentFormattedDate}`,\n      stickyNotes: [\n        {\n          title: \"factor de infección más reciente\",\n          value: data.infectionFactor,\n          type: \"warning\",\n        },\n        {\n          title: `estimación cantidad de posibles casos para el ${date.fullEstimateDate}`,\n          value: chartData2[chartData2.length - 1].confirmados,\n        },\n        {\n          title: `Esta condición solo se da si este factor de infección se mantiene hasta el ${date.shortEstimateDate}; esto puede aumentar o disminuir.`,\n          type: \"note\",\n        },\n      ],\n      chartData: chartData2,\n    },\n    {\n      title: \"usando el factor de infección menor de la oms para el covid-19\",\n      stickyNotes: [\n        {\n          title: \"factor de infección menor de la oms\",\n          value: omsInfectionFactor,\n          type: \"warning\",\n        },\n        {\n          title: `estimación cantidad de posibles casos para el ${date.fullEstimateDate}`,\n          value: chartData3[chartData3.length - 1].confirmados,\n        },\n        {\n          title: `Esta condición solo se da si este factor de infección se mantiene hasta el ${date.shortEstimateDate}; esto puede aumentar o disminuir.`,\n          type: \"note\",\n        },\n      ],\n      chartData: chartData3,\n    },\n  ];\n}\n\nexport function useGrowthEstimates(data) {\n  const [date, setDate] = useState({\n    estimateDate: \"\",\n    formattedDate: \"\",\n  });\n  const d = useDetailDate(data.results);\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    if (data.currentDate) {\n      const estimateDate = addDays(data.currentDate, 5);\n\n      setDate({\n        shortStartDate: `${getDate(d.start)}/${getMonth(d.start) + 1}`,\n        shortEstimateDate: `${getDate(estimateDate)}/${\n          getMonth(estimateDate) + 1\n        }`,\n        longEstimateDate: formatDate(estimateDate),\n        fullEstimateDate: `${getDate(estimateDate)} de ${format(\n          estimateDate,\n          \"LLLL\",\n          { locale: es }\n        )} de ${getYear(estimateDate)}`,\n        currentFormattedDate: `${getDate(data.currentDate)}/${\n          getMonth(data.currentDate) + 1\n        }`,\n      });\n    }\n  }, [d.start, data.currentDate]);\n\n  useEffect(() => {\n    setItems(getScenariosItems(date, data));\n  }, [data.infectionFactor, data.averageInfectionFactor, data.results]); //eslint-disable-line\n\n  return {\n    title: \"Estimaciones del crecimiento del virus\",\n    subtitle: `Nota: extendimos las estimaciones hasta el ${\n      date.longEstimateDate\n    } (+5 días) y los escenarios comienzan a partir del día ${formatDate(\n      d.start\n    )}`,\n    items: items,\n  };\n}\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { Title } from \"../../../../../components\";\n\nconst HomeHeader = ({ year, month }) => {\n  return (\n    <Grid item md={7}>\n      <Title text=\"Estado actual del virus\" />\n      <Typography className=\"covid19-info-title\" variant=\"h6\">\n        Fuentes primarias\n      </Typography>\n      <Typography className=\"covid19-info\" variant=\"subtitle1\">\n        Ministerio de Salud P&uacute;blica de la R.D.\n      </Typography>\n      <Typography className=\"covid19-info\" variant=\"subtitle1\">\n        Johns Hopkins Coronavirus Resource Center\n      </Typography>\n      <Typography className=\"covid19-info\" variant=\"subtitle1\">\n        Sistema Nacional de Vigilancia Epidemiol&oacute;gica\n      </Typography>\n      <Typography className=\"covid19-info-date\" variant=\"h6\">\n        <span className=\"year\">{year}</span> |{\" \"}\n        <span className=\"month\">{month}</span>\n      </Typography>\n    </Grid>\n  );\n};\n\nHomeHeader.propTypes = {\n  year: PropTypes.number.isRequired,\n  month: PropTypes.string.isRequired,\n};\n\nexport default memo(HomeHeader);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { Paper } from \"../../../../../components\";\n\nconst HomeHeaderPaper = ({ year, month, weekday, day, time }) => {\n  return (\n    <Grid className=\"home-header-paper\" item md={8} lg={5}>\n      <Paper className=\"covid19-info-paper\" type=\"dark\">\n        <Typography variant=\"h4\">{weekday}</Typography>\n        <Typography variant=\"h5\">\n          {day} de {month} de {year}\n        </Typography>\n        <Typography variant=\"h5\">{time}</Typography>\n      </Paper>\n    </Grid>\n  );\n};\n\nHomeHeaderPaper.propTypes = {\n  year: PropTypes.number.isRequired,\n  month: PropTypes.string.isRequired,\n  weekday: PropTypes.string.isRequired,\n  day: PropTypes.number.isRequired,\n  time: PropTypes.string.isRequired,\n};\n\nexport default memo(HomeHeaderPaper);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chart } from \"../../../../components\";\n\nconst SinaveChart = ({ confirmed, discarded }) => {\n  return (\n    <Chart\n      layout=\"vertical\"\n      height={150}\n      title=\"casos sospechosos reportados al sinave\"\n      note=\"las pruebas fueron descartadas por laboratorio.\"\n      primarySource=\"Sistema Nacional de Vigilancia Epidemiol&oacute;gica (SINAVE)\"\n      xaxis={{\n        type: \"number\",\n      }}\n      yaxis={{\n        type: \"category\",\n        hide: true,\n      }}\n      colors={[\"#4a90e2\", \"#7ed321\"]}\n      data={[\n        { name: \"confirmados\", confirmados: confirmed, descartados: discarded },\n      ]}\n      withLabels={false}\n    />\n  );\n};\n\nSinaveChart.defaultProps = {\n  confirmed: 0,\n  discarded: 0,\n};\n\nSinaveChart.propTypes = {\n  confirmed: PropTypes.number,\n  discarded: PropTypes.number,\n};\n\nexport default memo(SinaveChart);\n","import React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid } from \"@material-ui/core\";\nimport {\n  ConfirmedCases,\n  InfectionFactor,\n  StickyNote,\n} from \"../../../../../components\";\nimport SinaveChart from \"../../Chart/SinaveChart\";\n\nconst SummaryCases = ({\n  total,\n  newCases,\n  recovered,\n  deceased,\n  discarded,\n  infectionFactor,\n  oldInfectionFactor,\n  date,\n}) => {\n  const [rates, setRates] = useState({\n    recovered: 0,\n    lethality: 0,\n  });\n\n  useEffect(() => {\n    setRates({\n      recovered: Math.round((recovered / total) * 100),\n      lethality: Math.round((deceased / total) * 100),\n    });\n  }, [total, recovered, deceased]);\n\n  return (\n    <Grid className=\"covid19-summary-cases\" container direction=\"row\">\n      <Grid className=\"covid19-confirmed-cases\" item lg={3}>\n        <ConfirmedCases total={total} />\n      </Grid>\n      <Grid className=\"covid19-summary-cases-stack\" item md={12} lg={6}>\n        <Grid item sm={6}>\n          <Grid container direction=\"column\">\n            <Grid className=\"summary-cases-sn-wrapper\" item>\n              <StickyNote value={newCases} title=\"aumento de confirmados\" />\n            </Grid>\n            <Grid className=\"summary-cases-sn-wrapper\" item>\n              <StickyNote\n                value={recovered}\n                title=\"pacientes recuperados\"\n                description={`tasa de recuperación ${rates.recovered}%`}\n                type=\"success\"\n              />\n            </Grid>\n            <Grid className=\"summary-cases-sn-wrapper\" item>\n              <StickyNote\n                value={deceased}\n                title=\"fallecidos\"\n                description={`tasa de letalidad ${rates.lethality}%`}\n                type=\"danger\"\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item sm={6}>\n          <InfectionFactor\n            date={date}\n            today={infectionFactor}\n            yesterday={oldInfectionFactor}\n            difference={infectionFactor - oldInfectionFactor}\n          />\n        </Grid>\n      </Grid>\n      <Grid className=\"covid19-suspects-chart\" item xs={12} lg={3}>\n        <SinaveChart confirmed={total} discarded={discarded} />\n      </Grid>\n    </Grid>\n  );\n};\n\nSummaryCases.defaultProps = {\n  total: 0,\n  newCases: 0,\n  recovered: 0,\n  deceased: 0,\n  discarded: 0,\n  infectionFactor: 0,\n  oldInfectionFactor: 0,\n  date: null,\n};\n\nSummaryCases.propTypes = {\n  total: PropTypes.number,\n  newCases: PropTypes.number,\n  recovered: PropTypes.number,\n  deceased: PropTypes.number,\n  discarded: PropTypes.number,\n  infectionFactor: PropTypes.string,\n  oldInfectionFactor: PropTypes.string,\n  date: PropTypes.object,\n};\n\nexport default memo(SummaryCases);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chart } from \"../../../../components\";\nimport { formatDate, formatToShortDate } from \"../../../../utils\";\n\nconst ConfirmedEvolutionChart = ({ date, results }) => {\n  return (\n    <Chart\n      className=\"covid19-evolution-chart\"\n      type=\"line\"\n      height={700}\n      title=\"evoluci&oacute;n del virus a nivel de casos confirmados en el pa&iacute;s\"\n      note={`el gráfico comienza a partir del ${formatDate(date.start)}`}\n      primarySource=\"Ministerio de Salud P&uacute;blica de la R.D. | Johns Hopkins Coronavirus Resource Center\"\n      explanatoryNote={`Los datos reportados en la gráfica corresponden al corte del informe presentado por el Ministerio de Salud a las 10:00 a.m. del ${formatDate(\n        date.end\n      )}`}\n      noteLocationBottom={false}\n      colors={[\"#f79a3a\", \"#d0021b\", \"#7ed321\"]}\n      data={results.map((result) => {\n        const date = new Date(result.date);\n\n        return {\n          name: `${formatToShortDate(date)}`,\n          confirmados: result.confirmed,\n          defunciones: result.deaths,\n          recuperados: result.recovered,\n        };\n      })}\n    />\n  );\n};\n\nConfirmedEvolutionChart.defaultProps = {\n  date: {\n    start: null,\n    end: null,\n  },\n  results: [],\n};\n\nConfirmedEvolutionChart.propTypes = {\n  date: PropTypes.shape({\n    start: PropTypes.object,\n    end: PropTypes.object,\n  }),\n  results: PropTypes.array,\n};\n\nexport default memo(ConfirmedEvolutionChart);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chart } from \"../../../../components\";\nimport { formatDate, formatToShortDate } from \"../../../../utils\";\n\nconst ConfirmedEvolutionChart = ({ date, results }) => {\n  return (\n    <Chart\n      className=\"covid19-confirmed-discarded-chart\"\n      height={350}\n      title=\"cantidad de casos descartados y confirmados por d&iacute;a\"\n      note={`el gráfico comienza a partir del ${formatDate(date.start)}`}\n      primarySource=\"Ministerio de Salud P&uacute;blica de la R.D. | Johns Hopkins Coronavirus Resource Center\"\n      noteLocationBottom={false}\n      colors={[\"#7ed321\", \"#d0021b\"]}\n      data={results.map((result) => {\n        const date = new Date(result.date);\n\n        return {\n          name: `${formatToShortDate(date)}`,\n          descartados: result.discarded,\n          confirmados: result.confirmed,\n        };\n      })}\n    />\n  );\n};\n\nConfirmedEvolutionChart.defaultProps = {\n  date: {\n    start: null,\n    end: null,\n  },\n  results: [],\n};\n\nConfirmedEvolutionChart.propTypes = {\n  date: PropTypes.shape({\n    start: PropTypes.object,\n    end: PropTypes.object,\n  }),\n  results: PropTypes.array,\n};\n\nexport default memo(ConfirmedEvolutionChart);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { useDetailDate } from \"../../../../../hooks\";\nimport Header from \"./Header\";\nimport HeaderPaper from \"./HeaderPaper\";\nimport SummaryCases from \"./SummaryCases\";\nimport ConfirmedEvolutionChart from \"../../Chart/ConfirmedEvolutionChart\";\nimport DiscardedConfirmedChart from \"../../Chart/DiscardedConfirmedChart\";\n\nconst ActualStateSection = ({\n  date,\n  infectionFactor,\n  oldInfectionFactor,\n  results,\n  currentData,\n  oldData,\n}) => {\n  const d = useDetailDate(results);\n\n  return (\n    <div className=\"covid19-actual-state-section section\">\n      <Grid\n        className=\"covid19-info-container\"\n        container\n        justify=\"space-between\"\n      >\n        <Header year={date.year} month={date.month} />\n        <HeaderPaper\n          year={date.year}\n          month={date.month}\n          weekday={date.weekday}\n          day={date.day}\n          time={date.time}\n        />\n      </Grid>\n      <Typography className=\"covid19-summary-title\" variant=\"h5\">\n        RESUMEN\n      </Typography>\n      <SummaryCases\n        total={currentData.confirmed}\n        yesterdayTotal={oldData.confirmed}\n        newCases={currentData.confirmed - oldData.confirmed}\n        recovered={currentData.recovered}\n        deceased={currentData.deaths}\n        discarded={currentData.discarded}\n        infectionFactor={infectionFactor}\n        oldInfectionFactor={oldInfectionFactor}\n        date={date.current}\n        day={date.day}\n        yesterday={date.yesterday}\n        month={date.monthNumber}\n      />\n      <Grid item xs={12}>\n        <ConfirmedEvolutionChart results={results} date={d} />\n      </Grid>\n      <Grid item xs={12}>\n        <DiscardedConfirmedChart results={results} date={d} />\n      </Grid>\n    </div>\n  );\n};\n\nActualStateSection.defaultProps = {\n  date: {\n    current: null,\n    year: 0,\n    month: \"\",\n    monthNumber: 0,\n    weekday: \"\",\n    day: 0,\n    yesterday: 0,\n    time: \"\",\n  },\n  infectionFactor: 0,\n  oldInfectionFactor: 0,\n  results: [],\n  currentData: null,\n  oldData: null,\n};\n\nActualStateSection.propTypes = {\n  date: PropTypes.shape({\n    current: PropTypes.object,\n    year: PropTypes.number,\n    month: PropTypes.string,\n    monthNumber: PropTypes.number,\n    weekday: PropTypes.string,\n    day: PropTypes.number,\n    yesterday: PropTypes.number,\n    time: PropTypes.string,\n  }),\n  infectionFactor: PropTypes.string,\n  oldInfectionFactor: PropTypes.string,\n  results: PropTypes.array,\n  currentData: PropTypes.object,\n  oldData: PropTypes.object,\n};\n\nexport default memo(ActualStateSection);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chart } from \"../../../../components\";\n\nconst GrowthScenarioChart = ({ data }) => {\n  return (\n    <Chart\n      className=\"covid19-growth-scenario1\"\n      type=\"area\"\n      height={350}\n      title=\"evoluci&oacute;n del virus en escenario # 1\"\n      primarySource=\"Johns Hopkins Coronavirus Resource Center\"\n      data={data}\n      withLabels={true}\n    />\n  );\n};\n\nGrowthScenarioChart.defaultProps = {\n  data: [],\n};\n\nGrowthScenarioChart.propTypes = {\n  data: PropTypes.array,\n};\n\nexport default memo(GrowthScenarioChart);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { useGrowthEstimates } from \"../../../../../hooks\";\nimport { StickyNote, Subtitle, Title } from \"../../../../../components\";\nimport GrowthScenarioChart from \"../../Chart/GrowthScenarioChart\";\n\nconst GrowthEstimatesSection = ({ currentDate, infectionFactor, averageInfectionFactor, results }) => {\n  const data = useGrowthEstimates({\n    currentDate: currentDate,\n    infectionFactor: infectionFactor,\n    averageInfectionFactor: averageInfectionFactor,\n    results: results,\n  });\n\n  return (\n    <div className=\"covid19-growth-estimates-section section\">\n      <Title text={data.title} />\n      <Subtitle text={data.subtitle} />\n      {data.items.map((item, idx) => {\n        return (\n          <Grid key={idx} className=\"covid19-growth-estimate-item\" container>\n            <Typography\n              className=\"covid19-growth-estimate-item-title\"\n              variant=\"h5\"\n            >\n              escenario #{idx + 1}: {item.title}\n            </Typography>\n            <Grid className=\"covid19-growth-estimate-sn-wrapper\" container>\n              {item.stickyNotes.map((props, index) => {\n                return (\n                  <Grid key={`sticky-note-${index}`} item xs={12} md={4}>\n                    <StickyNote {...props} />\n                  </Grid>\n                );\n              })}\n              <Grid item xs={12}>\n                <GrowthScenarioChart\n                  data={item.chartData}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        );\n      })}\n    </div>\n  );\n};\n\nGrowthEstimatesSection.defaultProps = {\n  currentDate: null,\n  infectionFactor: \"0\",\n  averageInfectionFactor: \"0\",\n  results: [],\n};\n\nGrowthEstimatesSection.propTypes = {\n  currentDate: PropTypes.object,\n  infectionFactor: PropTypes.string,\n  averageInfectionFactor: PropTypes.string,\n  results: PropTypes.array,\n};\n\nexport default memo(GrowthEstimatesSection);\n","import { gql } from \"apollo-boost\";\n\nexport const COVID_RESULTS = gql`\n  query results($countries: [String], $date: DateInput) {\n    results(countries: $countries, date: $date) {\n      date\n      confirmed\n      deaths\n      recovered\n      growthRate\n    }\n  }\n`;\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { CircularLoader } from \"../../components\";\nimport { useFetchCovidResults } from \"../../hooks\";\nimport ActualStateSection from \"./components/Section/ActualState\";\nimport GrowthEstimatesSection from \"./components/Section/GrowthEstimates\";\nimport { COVID_RESULTS } from \"./graphql\";\n\nconst date = new Date();\n\nconst Home = ({ match: { params } }) => {\n  console.log(params);\n  const {\n    loading,\n    results,\n    currentData,\n    oldData,\n    infectionFactor,\n    oldInfectionFactor,\n    averageInfectionFactor,\n    currentDate,\n    year,\n    month,\n    monthNumber,\n    weekday,\n    day,\n    yesterday,\n    time,\n    isToday,\n  } = useFetchCovidResults(\n    COVID_RESULTS,\n    [\"Dominican Republic\"],\n    !isEmpty(params.date) ? params.date : date\n  );\n\n  console.log(\"DATA\", results);\n\n  if (!currentData || loading) {\n    return <CircularLoader />;\n  }\n\n  return (\n    <div className=\"home\">\n      <ActualStateSection\n        date={{\n          current: currentDate,\n          year: year,\n          month: month,\n          monthNumber: monthNumber,\n          weekday: weekday,\n          day: day,\n          yesterday: yesterday,\n          time: isToday ? time : \"\",\n        }}\n        infectionFactor={infectionFactor}\n        oldInfectionFactor={oldInfectionFactor}\n        results={results}\n        currentData={currentData}\n        oldData={oldData}\n      />\n      <GrowthEstimatesSection\n        currentDate={currentDate}\n        infectionFactor={infectionFactor}\n        averageInfectionFactor={averageInfectionFactor}\n        results={results}\n      />\n    </div>\n  );\n};\n\nexport default memo(Home);\n"],"sourceRoot":""}