{"version":3,"sources":["components/Paper/index.jsx","components/Chart/BarChart.jsx","components/Chart/LineChart.jsx","components/Chart/index.jsx","components/Chart/constants.js","utils/index.js","components/ConfirmedCases/index.jsx","components/InfectionDifference/index.jsx","components/InfectionFactor/index.jsx","components/StickyNote/index.jsx","components/Subtitle/index.jsx","components/Title/index.jsx","hooks/useDetailDate.js","resources/data/index.js","hooks/useFetchCovidResults.js","views/Home/components/Section/ActualState/Header.jsx","views/Home/components/Section/ActualState/HeaderPaper.jsx","views/Home/components/Chart/SinaveChart.jsx","views/Home/components/Section/ActualState/SummaryCases.jsx","views/Home/components/Chart/ConfirmedEvolutionChart.jsx","views/Home/components/Chart/DiscardedConfirmedChart.jsx","views/Home/components/Section/ActualState/index.jsx","views/Home/components/Chart/GrowthScenarioChart.jsx","views/Home/components/Section/GrowthEstimates/index.jsx","views/Home/graphql.js","views/Home/index.jsx"],"names":["Paper","className","type","elevation","children","classnames","defaultProps","memo","CovidBarChart","layout","dataKey","height","strokeDasharray","xaxis","yaxis","colors","data","withLabels","useState","bars","setBars","useEffect","isEmpty","obj","omit","Object","keys","width","map","key","idx","color","length","fill","position","CovidLineChart","lines","stroke","Chart","props","getNote","note","Typography","variant","title","noteLocationBottom","style","marginTop","marginBottom","Comp","undefined","BarChart","LineChart","React","createElement","pick","getChart","primarySource","explanatoryNote","hide","todaysDate","Date","numberWithCommas","x","toString","replace","setTimeToDate","date1","date2","today","set","hours","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","formatDate","date","getDay","getMonth","getYear","ConfirmedCases","total","propsTypes","PropTypes","number","isRequired","InfectionDifference","value","increased","Grid","item","xs","decreased","icon","faSortUp","faSortDown","size","InfectionFactor","yesterday","difference","day","month","oldDate","setOldDate","d","subDays","format","container","alignItems","Math","abs","toFixed","object","StickyNote","description","justify","Subtitle","text","Title","useDetailDate","results","start","end","setDate","startDate","endDate","extra","discarded","useFetchCovidResults","query","countries","console","log","newDate","originalDate","parse","dateArray","split","getDate","currentData","oldData","currentDate","useQuery","variables","gt","loading","result","newObj","find","extraData","assign","isToday","infectionFactor","confirmed","oldInfectionFactor","year","getFullYear","locale","es","monthNumber","weekday","time","md","lg","SinaveChart","name","confirmados","descartados","SummaryCases","newCases","recovered","deceased","lethality","rates","setRates","round","direction","sm","ConfirmedEvolutionChart","defunciones","deaths","recuperados","ActualStateSection","Header","HeaderPaper","yesterdayTotal","current","DiscardedConfirmedChart","GrowthScenarioChart","formatter1","Intl","DateTimeFormat","formatter2","GrowthEstimatesSection","estimateDate","formattedDate","addDays","shortEstimateDate","longEstimateDate","fullEstimateDate","currentFormattedDate","COVID_RESULTS","gql","params","match","CircularLoader","ActualState","GrowthEstimates"],"mappings":"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","file":"static/js/4.2f390efc.chunk.js","sourcesContent":["import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { Paper as MaterialPaper } from \"@material-ui/core\";\n\nconst Paper = ({ className, type, elevation, children }) => {\n  return (\n    <MaterialPaper\n      className={classnames(className, \"covid19-paper\", `paper-${type}`)}\n      elevation={elevation}\n    >\n      {children}\n    </MaterialPaper>\n  );\n};\n\nPaper.defaultProps = {\n  className: null,\n  type: \"info\",\n  elevation: 2,\n};\n\nPaper.propTypes = {\n  className: PropTypes.string,\n  type: PropTypes.oneOf([\"info\", \"success\", \"warning\", \"danger\", \"dark\", \"note\"]),\n  elevation: PropTypes.number,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.arrayOf(PropTypes.element),\n  ]).isRequired,\n};\n\nexport default memo(Paper);\n","import React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport isEmpty from \"lodash/isEmpty\";\nimport omit from \"lodash/omit\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport {\n  BarChart,\n  Bar,\n  CartesianGrid,\n  LabelList,\n  Legend,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { VERTICAL, HORIZONTAL } from \"./constants\";\n\nconst CovidBarChart = ({\n  layout,\n  dataKey,\n  height,\n  strokeDasharray,\n  xaxis,\n  yaxis,\n  colors,\n  data,\n  withLabels,\n}) => {\n  const [bars, setBars] = useState([]);\n\n  useEffect(() => {\n    if (!isEmpty(data)) {\n      const obj = omit(data[0], dataKey);\n\n      setBars(Object.keys(obj));\n    }\n  }, [dataKey, data]);\n\n  return (\n    <AutoSizer>\n      {({ width }) => (\n        <BarChart\n          className=\"covid19-bar-chart\"\n          layout={layout}\n          data={data}\n          width={width}\n          height={height}\n        >\n          <CartesianGrid strokeDasharray={strokeDasharray} />\n          <XAxis {...xaxis} />\n          <YAxis {...yaxis} />\n          <Tooltip />\n          <Legend />\n          {bars.map((key, idx) => {\n            let color = colors[0];\n\n            if (colors.length > 1) color = colors[idx];\n\n            return (\n              <Bar key={key} dataKey={key} fill={color}>\n                {withLabels && <LabelList dataKey={key} position=\"top\" />}\n              </Bar>\n            );\n          })}\n        </BarChart>\n      )}\n    </AutoSizer>\n  );\n};\n\nCovidBarChart.defaultProps = {};\n\nCovidBarChart.propTypes = {\n  layout: PropTypes.oneOf([VERTICAL, HORIZONTAL]),\n  dataKey: PropTypes.string,\n  height: PropTypes.number,\n  strokeDasharray: PropTypes.string,\n  xaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  yaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  colors: PropTypes.arrayOf(PropTypes.string),\n  data: PropTypes.arrayOf(PropTypes.object),\n  withLabels: PropTypes.bool,\n};\n\nexport default memo(CovidBarChart);\n","import React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport isEmpty from \"lodash/isEmpty\";\nimport omit from \"lodash/omit\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport {\n  CartesianGrid,\n  LabelList,\n  Legend,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { VERTICAL, HORIZONTAL } from \"./constants\";\n\nconst CovidLineChart = ({\n  layout,\n  dataKey,\n  height,\n  strokeDasharray,\n  xaxis,\n  yaxis,\n  colors,\n  data,\n  withLabels,\n}) => {\n  const [lines, setBars] = useState([]);\n\n  useEffect(() => {\n    if (!isEmpty(data)) {\n      const obj = omit(data[0], dataKey);\n\n      setBars(Object.keys(obj));\n    }\n  }, [dataKey, data]);\n\n  return (\n    <AutoSizer>\n      {({ width }) => (\n        <LineChart\n          layout={layout}\n          data={data}\n          width={width}\n          height={height}\n        >\n          <CartesianGrid strokeDasharray={strokeDasharray} />\n          <XAxis {...xaxis} />\n          <YAxis {...yaxis} />\n          <Tooltip />\n          <Legend />\n          {lines.map((key, idx) => {\n            let color = colors[0];\n\n            if (colors.length > 1) color = colors[idx];\n\n            return (\n              <Line key={key} type=\"monotone\" dataKey={key} stroke={color}>\n                {withLabels && <LabelList dataKey={key} position=\"top\" />}\n              </Line>\n            );\n          })}\n        </LineChart>\n      )}\n    </AutoSizer>\n  );\n};\n\nCovidLineChart.defaultProps = {};\n\nCovidLineChart.propTypes = {\n  layout: PropTypes.oneOf([VERTICAL, HORIZONTAL]),\n  dataKey: PropTypes.string,\n  height: PropTypes.number,\n  strokeDasharray: PropTypes.string,\n  xaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  yaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  colors: PropTypes.arrayOf(PropTypes.string),\n  data: PropTypes.arrayOf(PropTypes.object),\n  withLabels: PropTypes.bool,\n};\n\nexport default memo(CovidLineChart);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport pick from \"lodash/pick\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Typography } from \"@material-ui/core\";\nimport Paper from \"../Paper\";\nimport BarChart from \"./BarChart\";\nimport LineChart from \"./LineChart\";\nimport { BAR, LINE, VERTICAL, HORIZONTAL } from \"./constants\";\n\nconst Chart = (props) => {\n  const getNote = () => {\n    if (isEmpty(props.note)) return \"\";\n\n    return (\n      <Typography className=\"chart-note\" variant=\"subtitle1\">\n        <b>Nota:</b> {props.note}\n      </Typography>\n    );\n  };\n\n  const getChart = () => {\n    let Comp = undefined;\n\n    if (props.type === BAR) Comp = BarChart;\n    else if (props.type === LINE) Comp = LineChart;\n\n    return React.createElement(Comp, {\n      ...pick(props, [\n        \"layout\",\n        \"dataKey\",\n        \"height\",\n        \"strokeDasharray\",\n        \"xaxis\",\n        \"yaxis\",\n        \"colors\",\n        \"data\",\n        \"withLabels\",\n      ]),\n    });\n  };\n\n  return (\n    <div className={classnames(\"covid19-chart\", props.className, props.type)}>\n      <Paper className=\"chart-paper\">\n        <>\n          <Typography className=\"chart-title\" variant=\"h6\">\n            {props.title}\n          </Typography>\n          {!props.noteLocationBottom && getNote()}\n          <div\n            style={{\n              marginTop: \"10px\",\n              marginBottom: \"10px\",\n              width: \"100%\",\n              height: props.height,\n            }}\n          >\n            {getChart()}\n          </div>\n          {props.noteLocationBottom && getNote()}\n          {!isEmpty(props.primarySource) && (\n            <div>\n              <Typography className=\"chart-bottom-title\" variant=\"subtitle1\">\n                Fuente primaria\n              </Typography>\n              <Typography\n                className=\"chart-bottom-description\"\n                variant=\"subtitle1\"\n              >\n                {props.primarySource}\n              </Typography>\n            </div>\n          )}\n          {!isEmpty(props.explanatoryNote) && (\n            <div>\n              <Typography\n                className=\"chart-bottom-explanatory-note-title\"\n                variant=\"subtitle1\"\n              >\n                Nota aclaratoria\n              </Typography>\n              <Typography\n                className=\"chart-bottom-description\"\n                variant=\"subtitle1\"\n              >\n                {props.explanatoryNote}\n              </Typography>\n            </div>\n          )}\n        </>\n      </Paper>\n    </div>\n  );\n};\n\nChart.defaultProps = {\n  className: null,\n  type: BAR,\n  layout: HORIZONTAL,\n  dataKey: \"name\",\n  height: 150,\n  strokeDasharray: \"3 3\",\n  note: \"\",\n  explanatoryNote: \"\",\n  noteLocationBottom: true,\n  xaxis: {\n    dataKey: \"name\",\n    type: \"category\",\n    hide: false,\n  },\n  yaxis: {\n    dataKey: \"\",\n    type: \"number\",\n    hide: false,\n  },\n  colors: [\"#4a90e2\"],\n  data: [],\n  withLabels: true,\n};\n\nChart.propTypes = {\n  className: PropTypes.string,\n  type: PropTypes.oneOf([BAR, LINE]),\n  layout: PropTypes.oneOf([VERTICAL, HORIZONTAL]),\n  dataKey: PropTypes.string.isRequired,\n  height: PropTypes.number,\n  strokeDasharray: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  note: PropTypes.string,\n  primarySource: PropTypes.string,\n  explanatoryNote: PropTypes.string,\n  xaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  yaxis: PropTypes.shape({\n    dataKey: PropTypes.string,\n    type: PropTypes.string,\n    hide: PropTypes.bool,\n  }),\n  colors: PropTypes.arrayOf(PropTypes.string),\n  data: PropTypes.arrayOf(PropTypes.object),\n  withLabels: PropTypes.bool,\n  noteLocationBottom: PropTypes.bool,\n};\n\nexport default memo(Chart);\n","export const BAR = 'bar';\nexport const LINE = 'line';\nexport const VERTICAL = \"vertical\";\nexport const HORIZONTAL = \"horizontal\";\n","import { set, getDate as getDay, getMonth, getYear, subDays } from \"date-fns\";\nimport isEmpty from \"lodash/isEmpty\";\n\nconst todaysDate = new Date();\n\nexport function numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nexport function setTimeToDate(date1, date2) {\n  const today = date2 ? date2 : todaysDate;\n  return set(new Date(date1), {\n    hours: today.getHours(),\n    minutes: today.getMinutes(),\n    seconds: today.getSeconds(),\n    milliseconds: today.getMilliseconds(),\n  });\n}\n\nexport function getDate(date) {\n  let newDate;\n  let originalDate;\n\n  if (!Date.parse(date)) {\n    const dateArray = !isEmpty(date) ? date.split(\"-\") : [];\n    newDate = !isEmpty(dateArray)\n      ? new Date(`${dateArray[1]}-${dateArray[0]}-${dateArray[2]}`)\n      : new Date();\n    originalDate = newDate;\n  } else {\n    newDate = setTimeToDate(date);\n    originalDate = newDate;\n  }\n\n  return {\n    oldDate: subDays(newDate, 20),\n    newDate: newDate,\n    originalDate: originalDate,\n  };\n}\n\nexport function formatDate(date) {\n  return `${getDay(date)}/${getMonth(date) + 1}/${getYear(date)}`;\n}\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Typography } from \"@material-ui/core\";\nimport Paper from \"../Paper\";\nimport { numberWithCommas } from \"../../utils\";\n\nconst ConfirmedCases = ({ total }) => {\n  return (\n    <Paper className=\"confirmed-cases-paper\" type=\"warning\">\n      <Typography className=\"confirmed-cases-title\" variant=\"h6\">\n        casos confirmados\n      </Typography>\n      <Typography className=\"confirmed-cases-total\" variant=\"h1\">\n        {numberWithCommas(total)}\n      </Typography>\n      <Typography className=\"confirmed-cases-description\" variant=\"h6\">\n        incluyendo fallecidos y recuperados\n      </Typography>\n    </Paper>\n  );\n};\n\nConfirmedCases.defaultProps = {\n  total: 0,\n};\n\nConfirmedCases.propsTypes = {\n  total: PropTypes.number.isRequired,\n};\n\nexport default memo(ConfirmedCases);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSortDown, faSortUp } from \"@fortawesome/free-solid-svg-icons\";\n\nconst InfectionDifference = ({ value, increased }) => {\n  return (\n    <Grid className=\"covid19-infection-difference\" item xs={12}>\n      <FontAwesomeIcon\n        className={classnames({ increased: increased, decreased: !increased })}\n        icon={increased ? faSortUp : faSortDown}\n        size=\"3x\"\n        color=\"#d0021b\"\n      />\n      <Typography className=\"covid19-infection-difference-value\" variant=\"h5\">\n        {value}\n      </Typography>\n    </Grid>\n  );\n};\n\nInfectionDifference.defaultProps = {\n  value: 0,\n  increased: true,\n};\n\nInfectionDifference.propTypes = {\n  value: PropTypes.string,\n  increased: PropTypes.bool,\n};\n\nexport default memo(InfectionDifference);\n","import \"./style.scss\";\nimport React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { format, subDays } from \"date-fns\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Paper from \"../Paper\";\nimport InfectionDifference from \"../InfectionDifference\";\n\nconst InfectionFactor = ({\n  date,\n  today,\n  yesterday,\n  difference,\n}) => {\n  const [oldDate, setOldDate] = useState({\n    day: 0,\n    month: 0,\n  });\n\n  useEffect(() => {\n    if (date) {\n      const d = subDays(date, 1);\n      setOldDate({\n        day: format(d, 'd'),\n        month: format(d, 'L'),\n      })\n    };\n  }, [date]);\n\n  return (\n    <Paper className=\"infection-factor-paper\">\n      <Typography className=\"infection-factor-title\" variant=\"h6\">\n        factor de infecci&oacute;n\n      </Typography>\n      <Grid container alignItems=\"center\">\n        <Grid item xs={6}>\n          <Typography className=\"infection-factor-today-value\" variant=\"h2\">\n            {today}\n          </Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <InfectionDifference\n            value={Math.abs(difference).toFixed(2)}\n            increased={difference > 0}\n          />\n        </Grid>\n        <Typography className=\"infection-factor-label\" variant=\"subtitle1\">\n          por persona\n        </Typography>\n      </Grid>\n      <Typography className=\"infection-factor-yesterday-title\" variant=\"h5\">\n        Factor del {oldDate.day}/{oldDate.month}\n      </Typography>\n      <Typography className=\"infection-factor-yesterday-value\" variant=\"h5\">\n        {yesterday}\n      </Typography>\n    </Paper>\n  );\n};\n\nInfectionFactor.defaultProps = {\n  date: null,\n  today: 0,\n  yesterday: 0,\n  difference: 0,\n};\n\nInfectionFactor.propsTypes = {\n  date: PropTypes.object,\n  today: PropTypes.number,\n  yesterday: PropTypes.number,\n  difference: PropTypes.number,\n};\n\nexport default memo(InfectionFactor);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport isEmpty from \"lodash/isEmpty\";\nimport classnames from \"classnames\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Paper from \"../Paper\";\nimport { numberWithCommas } from \"../../utils\";\n\nconst NOTE = \"note\";\n\nconst StickyNote = ({ className, type, value, title, description }) => {\n  return (\n    <Paper\n      className={classnames(className, \"covid19-sticky-notes\")}\n      type={type}\n    >\n      {type !== NOTE && (\n        <Grid container alignItems=\"center\" justify=\"space-between\">\n          <Grid item xs={5}>\n            <Typography className=\"covid19-sticky-notes-value\" variant=\"h2\">\n              {numberWithCommas(value)}\n            </Typography>\n          </Grid>\n          <Grid item xs={7}>\n            <Typography className=\"covid19-sticky-notes-title\" variant=\"h6\">\n              {title}\n            </Typography>\n            {!isEmpty(description) && (\n              <Typography className=\"covid19-sticky-notes-description\">\n                {description}\n              </Typography>\n            )}\n          </Grid>\n        </Grid>\n      )}\n      {type === NOTE && (\n        <Grid container alignItems=\"center\">\n          <Typography variant=\"h6\">NOTA</Typography>\n          <Typography variant=\"h6\">\n            {title}\n          </Typography>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nStickyNote.defaultProps = {\n  className: null,\n  type: \"info\",\n  value: 0,\n};\n\nStickyNote.propTypes = {\n  className: PropTypes.string,\n  type: PropTypes.oneOf([\"info\", \"success\", \"warning\", \"danger\", \"dark\", \"note\"]),\n  value: PropTypes.number,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n};\n\nexport default memo(StickyNote);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { Typography } from \"@material-ui/core\";\n\nconst Subtitle = ({ className, text }) => {\n  return (\n    <Typography className={classnames(className, \"covid19-subtitle\")} variant=\"h5\">\n      {text}\n    </Typography>\n  );\n};\n\nSubtitle.defaultProps = {\n  className: null,\n};\n\nSubtitle.propTypes = {\n  className: PropTypes.string,\n  text: PropTypes.string.isRequired,\n};\n\nexport default memo(Subtitle);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { Typography } from \"@material-ui/core\";\n\nconst Title = ({ className, text }) => {\n  return (\n    <Typography className={classnames(className, \"covid19-title\")} variant=\"h2\">\n      {text}\n    </Typography>\n  );\n};\n\nTitle.defaultProps = {\n  className: null,\n};\n\nTitle.propTypes = {\n  className: PropTypes.string,\n  text: PropTypes.string.isRequired,\n};\n\nexport default memo(Title);\n","import { useEffect, useState } from \"react\";\nimport isEmpty from \"lodash/isEmpty\";\n\nexport function useDetailDate(results) {\n  const [d, setDate] = useState({\n    start: null,\n    end: null,\n  });\n\n  useEffect(() => {\n    if (!isEmpty(results)) {\n      const startDate = new Date(results[0].date);\n      const endDate = new Date(results[results.length - 1].date);\n\n      setDate({\n        start: startDate,\n        end: endDate,\n      });\n    }\n  }, [results]);\n\n  return d;\n}\n","/* This file will have extra data that does not come in the GraphQL covid19 API.\n   This data will be included in a future self-made API with a more data detail.\n*/\n\nconst extra = [\n  {\n    date: \"2020-3-22\",\n    discarded: 100,\n  },\n  {\n    date: \"2020-3-23\",\n    discarded: 300,\n  },\n  {\n    date: \"2020-3-24\",\n    discarded: 500,\n  },\n  {\n    date: \"2020-3-25\",\n    discarded: 700,\n  },\n  {\n    date: \"2020-3-26\",\n    discarded: 900,\n  },\n  {\n    date: \"2020-3-27\",\n    discarded: 1100,\n  },\n  {\n    date: \"2020-3-28\",\n    discarded: 1300,\n  },\n  {\n    date: \"2020-3-29\",\n    discarded: 1600,\n  },\n  {\n    date: \"2020-3-30\",\n    discarded: 1900,\n  },\n  {\n    date: \"2020-3-31\",\n    discarded: 2200,\n  },\n  {\n    date: \"2020-4-1\",\n    discarded: 2500\n  },\n  {\n    date: \"2020-4-2\",\n    discarded: 2800,\n  },\n  {\n    date: \"2020-4-3\",\n    discarded: 3100,\n  },\n  {\n    date: \"2020-4-4\",\n    discarded: 3400,\n  },\n  {\n    date: \"2020-4-5\",\n    discarded: 3700,\n  },\n  {\n    date: \"2020-4-6\",\n    discarded: 4000,\n  },\n  {\n    date: \"2020-4-7\",\n    discarded: 4300,\n  },\n  {\n    date: \"2020-4-8\",\n    discarded: 4600,\n  },\n  {\n    date: \"2020-4-9\",\n    discarded: 4900,\n  }\n];\n\nexport default extra;\n","import { useQuery } from \"@apollo/react-hooks\";\nimport isEmpty from \"lodash/isEmpty\";\nimport find from \"lodash/find\";\nimport { format, isToday } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\nimport extraData from \"../resources/data\";\nimport { getDate, setTimeToDate } from \"../utils\";\n\nexport function useFetchCovidResults(query, countries, date) {\n  console.log(\"DATE\", date);\n  const { oldDate, newDate, originalDate } = getDate(date);\n  let results = [];\n  let currentData = undefined;\n  let oldData = undefined;\n  let currentDate = newDate;\n\n  const { data, loading } = useQuery(query, {\n    variables: {\n      countries: countries,\n      date: { gt: oldDate },\n    },\n  });\n\n  if (data && !loading) {\n    results = data.results.map((result) => {\n      let newObj = result;\n      const item = find(extraData, { date: result.date });\n\n      if (item) Object.assign(newObj, item);\n\n      return newObj;\n    });\n  }\n\n  if (isToday(originalDate) && data && !loading) {\n    currentData = results[results.length - 1];\n    oldData = results[results.length - 2];\n    currentDate = setTimeToDate(new Date(currentData.date));\n  }\n\n  return {\n    loading: loading,\n    results: results,\n    currentData: currentData,\n    oldData: oldData,\n    infectionFactor: !isEmpty(currentData)\n      ? (currentData.confirmed / oldData.confirmed).toFixed(2)\n      : 0,\n    oldInfectionFactor: !isEmpty(currentData)\n      ? (oldData.confirmed / results[results.length - 3].confirmed).toFixed(2)\n      : 0,\n    currentDate: currentDate,\n    year: currentDate.getFullYear(),\n    month: format(currentDate, \"LLLL\", { locale: es }),\n    monthNumber: currentDate.getMonth() + 1,\n    weekday: format(currentDate, \"cccc\", { locale: es }),\n    day: currentDate.getDate(),\n    time: format(currentDate, \"p\"),\n    isToday: isToday(currentDate),\n  };\n}\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { Title } from \"../../../../../components\";\n\nconst HomeHeader = ({ year, month }) => {\n  return (\n    <Grid item md={7}>\n      <Title text=\"Estado actual del virus\" />\n      <Typography className=\"covid19-info-title\" variant=\"h6\">\n        Fuentes primarias\n      </Typography>\n      <Typography className=\"covid19-info\" variant=\"subtitle1\">\n        Ministerio de Salud P&uacute;blica de la R.D.\n      </Typography>\n      <Typography className=\"covid19-info\" variant=\"subtitle1\">\n        Johns Hopkins Coronavirus Resource Center\n      </Typography>\n      <Typography className=\"covid19-info\" variant=\"subtitle1\">\n        Sistema Nacional de Vigilancia Epidemiol&oacute;gica\n      </Typography>\n      <Typography className=\"covid19-info-date\" variant=\"h6\">\n        <span className=\"year\">{year}</span> |{\" \"}\n        <span className=\"month\">{month}</span>\n      </Typography>\n    </Grid>\n  );\n};\n\nHomeHeader.propTypes = {\n  year: PropTypes.number.isRequired,\n  month: PropTypes.string.isRequired,\n};\n\nexport default memo(HomeHeader);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { Paper } from \"../../../../../components\";\n\nconst HomeHeaderPaper = ({ year, month, weekday, day, time }) => {\n  return (\n    <Grid className=\"home-header-paper\" item md={8} lg={5}>\n      <Paper className=\"covid19-info-paper\" type=\"dark\">\n        <Typography variant=\"h4\">{weekday}</Typography>\n        <Typography variant=\"h5\">\n          {day} de {month} de {year}\n        </Typography>\n        <Typography variant=\"h5\">{time}</Typography>\n      </Paper>\n    </Grid>\n  );\n};\n\nHomeHeaderPaper.propTypes = {\n  year: PropTypes.number.isRequired,\n  month: PropTypes.string.isRequired,\n  weekday: PropTypes.string.isRequired,\n  day: PropTypes.number.isRequired,\n  time: PropTypes.string.isRequired,\n};\n\nexport default memo(HomeHeaderPaper);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chart } from \"../../../../components\";\n\nconst SinaveChart = ({ confirmed, discarded }) => {\n  return (\n    <Chart\n      layout=\"vertical\"\n      height={150}\n      title=\"casos sospechosos reportados al sinave\"\n      note=\"las pruebas fueron descartadas por laboratorio.\"\n      primarySource=\"Sistema Nacional de Vigilancia Epidemiol&oacute;gica (SINAVE)\"\n      xaxis={{\n        type: \"number\",\n      }}\n      yaxis={{\n        type: \"category\",\n        hide: true,\n      }}\n      colors={[\"#4a90e2\", \"#7ed321\"]}\n      data={[\n        { name: \"confirmados\", confirmados: confirmed, descartados: discarded },\n      ]}\n      withLabels={false}\n    />\n  );\n};\n\nSinaveChart.defaultProps = {\n  confirmed: 0,\n  discarded: 0,\n};\n\nSinaveChart.propTypes = {\n  confirmed: PropTypes.number,\n  discarded: PropTypes.number,\n};\n\nexport default memo(SinaveChart);\n","import React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid } from \"@material-ui/core\";\nimport {\n  ConfirmedCases,\n  InfectionFactor,\n  StickyNote,\n} from \"../../../../../components\";\nimport SinaveChart from \"../../Chart/SinaveChart\";\n\nconst SummaryCases = ({\n  total,\n  newCases,\n  recovered,\n  deceased,\n  discarded,\n  infectionFactor,\n  oldInfectionFactor,\n  date,\n}) => {\n  const [rates, setRates] = useState({\n    recovered: 0,\n    lethality: 0,\n  });\n\n  useEffect(() => {\n    setRates({\n      recovered: Math.round((recovered / total) * 100),\n      lethality: Math.round((deceased / total) * 100),\n    });\n  }, [total, recovered, deceased]);\n\n  return (\n    <Grid className=\"covid19-summary-cases\" container direction=\"row\">\n      <Grid className=\"covid19-confirmed-cases\" item lg={3}>\n        <ConfirmedCases total={total} />\n      </Grid>\n      <Grid className=\"covid19-summary-cases-stack\" item md={12} lg={6}>\n        <Grid item sm={6}>\n          <Grid container direction=\"column\">\n            <Grid className=\"summary-cases-sn-wrapper\" item>\n              <StickyNote value={newCases} title=\"aumento de confirmados\" />\n            </Grid>\n            <Grid className=\"summary-cases-sn-wrapper\" item>\n              <StickyNote\n                value={recovered}\n                title=\"pacientes recuperados\"\n                description={`tasa de recuperación ${rates.recovered}%`}\n                type=\"success\"\n              />\n            </Grid>\n            <Grid className=\"summary-cases-sn-wrapper\" item>\n              <StickyNote\n                value={deceased}\n                title=\"fallecidos\"\n                description={`tasa de letalidad ${rates.lethality}%`}\n                type=\"danger\"\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item sm={6}>\n          <InfectionFactor\n            date={date}\n            today={infectionFactor}\n            yesterday={oldInfectionFactor}\n            difference={infectionFactor - oldInfectionFactor}\n          />\n        </Grid>\n      </Grid>\n      <Grid className=\"covid19-suspects-chart\" item xs={12} lg={3}>\n        <SinaveChart confirmed={total} discarded={discarded} />\n      </Grid>\n    </Grid>\n  );\n};\n\nSummaryCases.defaultProps = {\n  total: 0,\n  newCases: 0,\n  recovered: 0,\n  deceased: 0,\n  discarded: 0,\n  infectionFactor: 0,\n  oldInfectionFactor: 0,\n  date: null,\n};\n\nSummaryCases.propTypes = {\n  total: PropTypes.number,\n  newCases: PropTypes.number,\n  recovered: PropTypes.number,\n  deceased: PropTypes.number,\n  discarded: PropTypes.number,\n  infectionFactor: PropTypes.string,\n  oldInfectionFactor: PropTypes.string,\n  date: PropTypes.object,\n};\n\nexport default memo(SummaryCases);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getDate, getMonth } from \"date-fns\";\nimport { Chart } from \"../../../../components\";\nimport { formatDate } from \"../../../../utils\";\n\nconst ConfirmedEvolutionChart = ({ date, results }) => {\n  return (\n    <Chart\n      className=\"covid19-evolution-chart\"\n      type=\"line\"\n      height={700}\n      title=\"evoluci&oacute;n del virus a nivel de casos confirmados en el pa&iacute;s\"\n      note={`el gráfico comienza a partir del ${formatDate(date.start)}`}\n      primarySource=\"Ministerio de Salud P&uacute;blica de la R.D. | Johns Hopkins Coronavirus Resource Center\"\n      explanatoryNote={`Los datos reportados en la gráfica corresponden al corte del informe presentado por el Ministerio de Salud a las 10:00 a.m. del ${formatDate(\n        date.end\n      )}`}\n      noteLocationBottom={false}\n      colors={[\"#f79a3a\", \"#d0021b\", \"#7ed321\"]}\n      data={results.map((result) => {\n        const date = new Date(result.date);\n\n        return {\n          name: `${getDate(date)}/${getMonth(date) + 1}`,\n          confirmados: result.confirmed,\n          defunciones: result.deaths,\n          recuperados: result.recovered,\n        };\n      })}\n    />\n  );\n};\n\nConfirmedEvolutionChart.defaultProps = {\n  date: {\n    start: null,\n    end: null,\n  },\n  results: [],\n};\n\nConfirmedEvolutionChart.propTypes = {\n  date: PropTypes.shape({\n    start: PropTypes.object,\n    end: PropTypes.object,\n  }),\n  results: PropTypes.array,\n};\n\nexport default memo(ConfirmedEvolutionChart);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getDate, getMonth } from \"date-fns\";\nimport { Chart } from \"../../../../components\";\nimport { formatDate } from \"../../../../utils\";\n\nconst ConfirmedEvolutionChart = ({ date, results }) => {\n  return (\n    <Chart\n      className=\"covid19-confirmed-discarded-chart\"\n      height={350}\n      title=\"cantidad de casos descartados y confirmados por d&iacute;a\"\n      note={`el gráfico comienza a partir del ${formatDate(date.start)}`}\n      primarySource=\"Ministerio de Salud P&uacute;blica de la R.D. | Johns Hopkins Coronavirus Resource Center\"\n      noteLocationBottom={false}\n      colors={[\"#7ed321\", \"#d0021b\"]}\n      data={results.map((result) => {\n        const date = new Date(result.date);\n\n        return {\n          name: `${getDate(date)}/${getMonth(date) + 1}`,\n          discarded: result.discarded,\n          confirmados: result.confirmed,\n        };\n      })}\n    />\n  );\n};\n\nConfirmedEvolutionChart.defaultProps = {\n  date: {\n    start: null,\n    end: null,\n  },\n  results: [],\n};\n\nConfirmedEvolutionChart.propTypes = {\n  date: PropTypes.shape({\n    start: PropTypes.object,\n    end: PropTypes.object,\n  }),\n  results: PropTypes.array,\n};\n\nexport default memo(ConfirmedEvolutionChart);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { useDetailDate } from \"../../../../../hooks\";\nimport Header from \"./Header\";\nimport HeaderPaper from \"./HeaderPaper\";\nimport SummaryCases from \"./SummaryCases\";\nimport ConfirmedEvolutionChart from \"../../Chart/ConfirmedEvolutionChart\";\nimport DiscardedConfirmedChart from \"../../Chart/DiscardedConfirmedChart\";\n\nconst ActualStateSection = ({\n  date,\n  infectionFactor,\n  oldInfectionFactor,\n  results,\n  currentData,\n  oldData,\n}) => {\n  const d = useDetailDate(results);\n\n  return (\n    <div className=\"covid19-actual-state-section section\">\n      <Grid\n        className=\"covid19-info-container\"\n        container\n        justify=\"space-between\"\n      >\n        <Header year={date.year} month={date.month} />\n        <HeaderPaper\n          year={date.year}\n          month={date.month}\n          weekday={date.weekday}\n          day={date.day}\n          time={date.time}\n        />\n      </Grid>\n      <Typography className=\"covid19-summary-title\" variant=\"h5\">\n        RESUMEN\n      </Typography>\n      <SummaryCases\n        total={currentData.confirmed}\n        yesterdayTotal={oldData.confirmed}\n        newCases={currentData.confirmed - oldData.confirmed}\n        recovered={currentData.recovered}\n        deceased={currentData.deaths}\n        discarded={currentData.discarded}\n        infectionFactor={infectionFactor}\n        oldInfectionFactor={oldInfectionFactor}\n        date={date.current}\n        day={date.day}\n        yesterday={date.yesterday}\n        month={date.monthNumber}\n      />\n      <Grid item xs={12}>\n        <ConfirmedEvolutionChart results={results} date={d} />\n      </Grid>\n      <Grid item xs={12}>\n        <DiscardedConfirmedChart results={results} date={d} />\n      </Grid>\n    </div>\n  );\n};\n\nActualStateSection.defaultProps = {\n  date: {\n    current: null,\n    year: 0,\n    month: \"\",\n    monthNumber: 0,\n    weekday: \"\",\n    day: 0,\n    yesterday: 0,\n    time: \"\",\n  },\n  infectionFactor: 0,\n  oldInfectionFactor: 0,\n  results: [],\n  currentData: null,\n  oldData: null,\n};\n\nActualStateSection.propTypes = {\n  date: PropTypes.shape({\n    current: PropTypes.object,\n    year: PropTypes.number,\n    month: PropTypes.string,\n    monthNumber: PropTypes.number,\n    weekday: PropTypes.string,\n    day: PropTypes.number,\n    yesterday: PropTypes.number,\n    time: PropTypes.string,\n  }),\n  infectionFactor: PropTypes.string,\n  oldInfectionFactor: PropTypes.string,\n  results: PropTypes.array,\n  currentData: PropTypes.object,\n  oldData: PropTypes.object,\n};\n\nexport default memo(ActualStateSection);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getDate, getMonth } from \"date-fns\";\nimport { Chart } from \"../../../../components\";\nimport { formatDate } from \"../../../../utils\";\n\nconst GrowthScenarioChart = ({ results }) => {\n  return (\n    <Chart\n      className=\"covid19-growth-scenario1\"\n      type=\"line\"\n      height={350}\n      title=\"evoluci&oacute;n del virus en escenario # 1\"\n      primarySource=\"Johns Hopkins Coronavirus Resource Center\"\n      colors={[\"#f79a3a\", \"#d0021b\", \"#7ed321\"]}\n      data={results.map((result) => {\n        const date = new Date(result.date);\n\n        return {\n          name: `${getDate(date)}/${getMonth(date) + 1}`,\n          confirmados: result.confirmed,\n          defunciones: result.deaths,\n          recuperados: result.recovered,\n        };\n      })}\n    />\n  );\n};\n\nGrowthScenarioChart.defaultProps = {\n  results: [],\n};\n\nGrowthScenarioChart.propTypes = {\n  results: PropTypes.array,\n};\n\nexport default memo(GrowthScenarioChart);\n","import \"./style.scss\";\nimport React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { addDays, getDate, getMonth } from \"date-fns\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { useDetailDate } from \"../../../../../hooks\";\nimport { Paper, StickyNote, Subtitle, Title } from \"../../../../../components\";\nimport { formatDate } from \"../../../../../utils\";\nimport GrowthScenarioChart from \"../../Chart/GrowthScenarioChart\";\n\nconst formatter1 = new Intl.DateTimeFormat(\"es\", {\n  month: \"long\",\n});\nconst formatter2 = new Intl.DateTimeFormat(\"es\", {\n  weekday: \"long\",\n});\n\nconst GrowthEstimatesSection = ({ currentDate, results }) => {\n  const [date, setDate] = useState({\n    estimateDate: \"\",\n    formattedDate: \"\",\n  });\n  const d = useDetailDate(results);\n\n  useEffect(() => {\n    if (currentDate) {\n      const estimateDate = addDays(currentDate, 5);\n\n      setDate({\n        shortEstimateDate: `${getDate(estimateDate)}/${getMonth(estimateDate)}`,\n        longEstimateDate: formatDate(estimateDate),\n        fullEstimateDate: `${getDate(estimateDate)} de ${formatter1.format(\n          estimateDate\n        )} de ${formatter2.format(estimateDate)}`,\n        currentFormattedDate: `${getDate(currentDate)}/${getMonth(\n          currentDate\n        )}`,\n      });\n    }\n  }, [currentDate]);\n\n  return (\n    <div className=\"covid19-growth-estimates-section section\">\n      <Title text=\"Estimaciones del crecimiento del virus\" />\n      <Subtitle\n        text={`Nota: extendimos las estimaciones hasta el ${\n          date.longEstimateDate\n        } (+5 días) y los escenarios comienzan a partir del día ${formatDate(\n          d.start\n        )}`}\n      />\n      <Grid className=\"covid19-growth-estimate-item\" container>\n        <Typography className=\"covid19-growth-estimate-item-title\" variant=\"h5\">\n          escenario #1: usando el <u>factor promedio</u> de infecc&oacute;n al{\" \"}\n          {date.currentFormattedDate}\n        </Typography>\n        <Grid className=\"covid19-growth-estimate-sn-wrapper\" container>\n          <Grid item xs={12} md={4}>\n            <StickyNote\n              value=\"1.29\"\n              title=\"factor promedio de infecci&oacute;n\"\n              description={`del 22/3 al ${date.shortEstimateDate}`}\n              type=\"warning\"\n            />\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <StickyNote\n              value=\"6,234\"\n              title={`estimación cantidad de posibles casos para el ${date.fullEstimateDate}`}\n            />\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <StickyNote\n              title={`Esta condición solo se da si este factor de\n              infección se mantiene hasta el ${date.shortEstimateDate}; esto puede aumentar o disminuir.`}\n              type=\"note\"\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <GrowthScenarioChart />\n        </Grid>\n      </Grid>\n      <Grid className=\"covid19-growth-estimate-item\" container>\n        <Typography className=\"covid19-growth-estimate-item-title\" variant=\"h5\">\n          escenario #2: usando el factor de infecc&oacute;n m&aacute;s reciente\n          al {date.currentFormattedDate}\n        </Typography>\n        <Grid className=\"covid19-growth-estimate-sn-wrapper\" container>\n          <Grid item xs={12} md={4}>\n            <StickyNote\n              value=\"1.11\"\n              title=\"factor de infecci&oacute;n m&aacute;s reciente\"\n              type=\"warning\"\n            />\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <StickyNote\n              value=\"2,940\"\n              title={`estimación cantidad de posibles casos para el ${date.fullEstimateDate}`}\n            />\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <StickyNote\n              title={`Esta condición solo se da si este factor de\n              infección se mantiene hasta el ${date.shortEstimateDate}; esto puede aumentar o disminuir.`}\n              type=\"note\"\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <GrowthScenarioChart />\n        </Grid>\n      </Grid>\n      <Grid className=\"covid19-growth-estimate-item\" container>\n        <Typography className=\"covid19-growth-estimate-item-title\" variant=\"h5\">\n          escenario #3: usando el factor de infecc&oacute;n menor de la oms para\n          el covid-19\n          <span className=\"danger-text\">(poco probable)</span>\n        </Typography>\n        <Grid className=\"covid19-growth-estimate-sn-wrapper\" container>\n          <Grid item xs={12} md={4}>\n            <StickyNote\n              value=\"2.00\"\n              title=\"factor de infecci&oacute;n menor de la oms\"\n              type=\"warning\"\n            />\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <StickyNote\n              value=\"55,840\"\n              title={`estimación cantidad de posibles casos para el ${date.fullEstimateDate}`}\n            />\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <StickyNote\n              title={`Esta condición solo se da si este factor de\n              infección se mantiene hasta el ${date.shortEstimateDate}; esto puede aumentar o disminuir.`}\n              type=\"note\"\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <GrowthScenarioChart />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nGrowthEstimatesSection.defaultProps = {\n  currentDate: null,\n  results: [],\n};\n\nGrowthEstimatesSection.propTypes = {\n  currentDate: PropTypes.object,\n  results: PropTypes.array,\n};\n\nexport default memo(GrowthEstimatesSection);\n","import { gql } from \"apollo-boost\";\n\nexport const COVID_RESULTS = gql`\n  query results($countries: [String], $date: DateInput) {\n    results(countries: $countries, date: $date) {\n      date\n      confirmed\n      deaths\n      recovered\n      growthRate\n    }\n  }\n`;\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { CircularLoader } from \"../../components\";\nimport { useFetchCovidResults } from \"../../hooks\";\nimport ActualStateSection from \"./components/Section/ActualState\";\nimport GrowthEstimatesSection from \"./components/Section/GrowthEstimates\";\nimport { COVID_RESULTS } from \"./graphql\";\n\nconst date = new Date();\n\nconst Home = ({ match: { params } }) => {\n  const {\n    loading,\n    results,\n    currentData,\n    oldData,\n    infectionFactor,\n    oldInfectionFactor,\n    currentDate,\n    year,\n    month,\n    monthNumber,\n    weekday,\n    day,\n    yesterday,\n    time,\n    isToday,\n  } = useFetchCovidResults(\n    COVID_RESULTS,\n    [\"Dominican Republic\"],\n    !isEmpty(params.date) ? params.date : date\n  );\n\n  console.log(\"DATA\", results);\n\n  if (!currentData || loading) {\n    return <CircularLoader />;\n  }\n\n  return (\n    <div className=\"home\">\n      <ActualStateSection\n        date={{\n          current: currentDate,\n          year: year,\n          month: month,\n          monthNumber: monthNumber,\n          weekday: weekday,\n          day: day,\n          yesterday: yesterday,\n          time: isToday ? time : \"\",\n        }}\n        infectionFactor={infectionFactor}\n        oldInfectionFactor={oldInfectionFactor}\n        results={results}\n        currentData={currentData}\n        oldData={oldData}\n      />\n      <GrowthEstimatesSection currentDate={currentDate} results={results} />\n    </div>\n  );\n};\n\nexport default memo(Home);\n"],"sourceRoot":""}