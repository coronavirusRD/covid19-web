{"version":3,"sources":["components/Layout/Header/index.jsx","components/Layout/Footer/index.jsx","App.js","serviceWorker.js","index.js","utils/index.js","components/CircularLoader/index.jsx"],"names":["memo","AppBar","className","position","Toolbar","Grid","container","direction","align","item","md","Typography","variant","getReportNumber","justify","Home","lazy","theme","createMuiTheme","palette","primary","main","text","typography","fontFamily","client","ApolloClient","uri","responsiveFontSizes","App","fallback","CircularLoader","ThemeProvider","CssBaseline","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","todaysDate","Date","formatterMonth","Intl","DateTimeFormat","month","formatterDay","weekday","formatterHour","hour","minute","hour12","numberWithCommas","x","toString","replace","replaceDashDate","date","getTopProvincesByKey","provinces","key","end","slice","orderBy","differenceInDays","setTimeToDate","today","set","hours","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","getDate","limit","newDate","originalDate","parseISO","dateArray","isEmpty","split","parseInt","oldDate","subDays","getLongMonth","isValid","format","getLongWeekday","getHour","formatToShortDate","getDay","getMonth","formatToLongDate","getYear","formatToFullDate","formatToAPIDate","loading","in","style","transitionDelay","defaultProps","CircularProgress","propTypes","PropTypes","bool"],"mappings":"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","file":"static/js/main.97f722a4.chunk.js","sourcesContent":["import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport { AppBar, Grid, Typography, Toolbar } from \"@material-ui/core\";\nimport { getReportNumber } from \"../../../utils\";\n\nconst Header = () => {\n  return (\n    <AppBar className=\"header\" position=\"static\">\n      <Toolbar className=\"header-toolbar\">\n        <Grid\n          className=\"header-content-container\"\n          container\n          direction=\"row\"\n          align=\"center\"\n        >\n          <Grid className=\"header-left-column\" item md={7}>\n            <Typography variant=\"h3\" align=\"left\">\n              An&aacute;lisis del crecimiento del COVID-19 en la\n              Rep&uacute;blica Dominicana\n            </Typography>\n          </Grid>\n          <Grid className=\"header-right-column\" item md={5}>\n            <Typography variant=\"h5\" align=\"right\">\n              INFORME #{getReportNumber()}\n            </Typography>\n            <Typography variant=\"h6\" align=\"right\">\n              Preparado por: Ing. Juan C. Salad&iacute;n Bonilla\n            </Typography>\n            <Typography variant=\"h6\" align=\"right\">\n              Director de Calidad en Guzm&aacute;n Ariza | Vice-chair ASQ SDQ\n            </Typography>\n            <Typography variant=\"h6\" align=\"right\">\n              juancsaladin@gmail.com\n            </Typography>\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default memo(Header);\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport { Grid, Toolbar } from \"@material-ui/core\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\" position=\"static\">\n      <Toolbar className=\"footer-toolbar\">\n        <Grid container direction=\"row\" align=\"center\" justify=\"center\">\n          Â© Codemera, 2013-2020.\n        </Grid>\n      </Toolbar>\n    </footer>\n  );\n};\n\nexport default memo(Footer);\n","import \"./App.scss\";\nimport React, { lazy, Suspense } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport {\n  CssBaseline,\n  createMuiTheme,\n  responsiveFontSizes,\n  ThemeProvider,\n} from \"@material-ui/core\";\nimport Header from \"./components/Layout/Header\";\nimport Footer from \"./components/Layout/Footer\";\nimport CircularLoader from \"./components/CircularLoader\";\n\nconst Home = lazy(() => import(\"./views/Home\"));\n\nlet theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#12454d\",\n    },\n    text: {\n      primary: \"#21262e\",\n    },\n  },\n  typography: {\n    fontFamily: [\"Lato\", \"Comfortaa\"],\n  },\n});\n\nconst client = new ApolloClient({\n  uri: \"https://covid19-graphql.now.sh/\",\n});\n\ntheme = responsiveFontSizes(theme);\n\nconst App = () => {\n  return (\n    <div className=\"covid19\">\n      <BrowserRouter>\n        <ApolloProvider client={client}>\n          <Suspense fallback={<CircularLoader />}>\n            <ThemeProvider theme={theme}>\n              <CssBaseline />\n              <Header />\n              <div>\n                <div className=\"covid19-content\">\n                  <Switch>\n                    <Route path=\"/covid19-web/:date?\" component={Home} />\n                  </Switch>\n                </div>\n                <Footer />\n              </div>\n            </ThemeProvider>\n          </Suspense>\n        </ApolloProvider>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\n  set,\n  differenceInDays,\n  getDate as getDay,\n  getMonth,\n  getYear,\n  parseISO,\n  subDays,\n  isValid,\n} from \"date-fns\";\nimport isEmpty from \"lodash/isEmpty\";\nimport orderBy from \"lodash/orderBy\";\nimport slice from \"lodash/slice\";\n\nconst REPORTS_STARTED_DATE = \"2020-03-23\";\n\nconst todaysDate = new Date();\nconst formatterMonth = new Intl.DateTimeFormat(\"es\", { month: \"long\" });\nconst formatterDay = new Intl.DateTimeFormat(\"es\", { weekday: \"long\" });\nconst formatterHour = new Intl.DateTimeFormat(\"es\", {\n  hour: \"numeric\",\n  minute: \"numeric\",\n  hour12: true,\n});\n\nexport function numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nexport function replaceDashDate(date) {\n  return date.replace(/-/g, \"/\");\n}\n\nexport function getTopProvincesByKey(provinces, key, direction = \"desc\", end = 5) {\n  return slice(orderBy(provinces, [key], [direction]), 0, end);\n}\n\nexport function getReportNumber() {\n  return differenceInDays(todaysDate, new Date(REPORTS_STARTED_DATE));\n}\n\nexport function setTimeToDate(date) {\n  const today = date ? date : todaysDate;\n  return set(new Date(date), {\n    hours: today.getHours(),\n    minutes: today.getMinutes(),\n    seconds: today.getSeconds(),\n    milliseconds: today.getMilliseconds(),\n  });\n}\n\nexport function getDate(date, limit) {\n  let newDate;\n  let originalDate;\n\n  if (!parseISO(date)) {\n    const dateArray = !isEmpty(date) ? date.split(\"-\") : [];\n    newDate = !isEmpty(dateArray)\n      ? new Date(dateArray[2], parseInt(dateArray[1]) - 1, dateArray[0])\n      : new Date();\n    originalDate = newDate;\n  } else {\n    newDate = setTimeToDate(date);\n    originalDate = newDate;\n  }\n\n  return {\n    oldDate: subDays(newDate, limit),\n    newDate: newDate,\n    originalDate: originalDate,\n  };\n}\n\nexport function getLongMonth(date) {\n  return isValid(date) ? formatterMonth.format(date) : \"\";\n}\n\nexport function getLongWeekday(date) {\n  return isValid(date) ? formatterDay.format(date) : \"\";\n}\n\nexport function getHour(date) {\n  return isValid(date) ? formatterHour.format(date) : \"\";\n}\n\nexport function formatToShortDate(date) {\n  return isValid(date) ? `${getDay(date)}/${getMonth(date) + 1}` : \"\";\n}\n\nexport function formatToLongDate(date) {\n  return isValid(date)\n    ? `${getDay(date)}/${getMonth(date) + 1}/${getYear(date)}`\n    : \"\";\n}\n\nexport function formatToFullDate(date) {\n  return isValid(date)\n    ? `${getDay(date)} de ${getLongMonth(date)} de ${getYear(date)}`\n    : \"\";\n}\n\nexport function formatToAPIDate(date) {\n  return isValid(date)\n    ? `${getYear(date)}-${getMonth(date) + 1}-${getDay(date)}`\n    : \"\";\n}\n","import \"./style.scss\";\nimport React, { memo } from \"react\";\nimport PropTypes from 'prop-types';\nimport {CircularProgress, Fade} from '@material-ui/core';\n\nconst CircularLoader = ({loading}) => {\n  return (\n    <Fade\n    in={loading}\n    style={{\n      transitionDelay: loading ? '800ms' : '0ms',\n    }}\n  >\n    <CircularProgress className=\"covid19-circular-loader\" />\n  </Fade>\n  )\n}\n\nCircularLoader.defaultProps = {\n  loading: true,\n}\n\nCircularProgress.propTypes = {\n  loading: PropTypes.bool,\n}\n\nexport default memo(CircularLoader);\n"],"sourceRoot":""}